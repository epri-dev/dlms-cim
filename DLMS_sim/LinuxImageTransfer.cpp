// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "LinuxCOSEMServer.h"
#include "COSEMAddress.h"
#include "LinuxImageTransfer.h"

namespace EPRI
{
    COSEM_BEGIN_SCHEMA(ImageTransfer::Image_Transfer_Status_Schema)
        COSEM_ENUM_TYPE
        (
            {
                IImageTransfer::IMAGE_TRANSFER_NOT_INITIATED,
                IImageTransfer::IMAGE_TRANSFER_INITIATED,
                IImageTransfer::IMAGE_VERIFICATION_INITIATED,
                IImageTransfer::IMAGE_VERIFICATION_SUCCESSFUL,
                IImageTransfer::IMAGE_VERIFICATION_FAILED,
                IImageTransfer::IMAGE_ACTIVATION_INITIATED,
                IImageTransfer::IMAGE_ACTIVATION_SUCCESSFUL,
                IImageTransfer::IMAGE_ACTIVATION_FAILED,
            }
         )
    COSEM_END_SCHEMA

    COSEM_BEGIN_SCHEMA(ImageTransfer::Image_Transferred_Block_Status_Schema)
        COSEM_BIT_STRING_TYPE
    COSEM_END_SCHEMA

    COSEM_BEGIN_SCHEMA(ImageTransfer::Image_To_Activate_Info_Schema)
        COSEM_BEGIN_STRUCTURE 
            COSEM_DOUBLE_LONG_UNSIGNED_TYPE
            COSEM_OCTET_STRING_TYPE
            COSEM_OCTET_STRING_TYPE
        COSEM_END_STRUCTURE
    COSEM_END_SCHEMA

    COSEM_BEGIN_SCHEMA(ImageTransfer::Image_Transfer_Initiate_Schema)
        COSEM_BEGIN_STRUCTURE 
            COSEM_OCTET_STRING_TYPE
            COSEM_DOUBLE_LONG_UNSIGNED_TYPE
        COSEM_END_STRUCTURE
    COSEM_END_SCHEMA

    COSEM_BEGIN_SCHEMA(ImageTransfer::Image_Block_Transfer_Schema)
        COSEM_BEGIN_STRUCTURE 
            COSEM_DOUBLE_LONG_UNSIGNED_TYPE
            COSEM_OCTET_STRING_TYPE
        COSEM_END_STRUCTURE
    COSEM_END_SCHEMA

    COSEM_BEGIN_SCHEMA(ImageTransfer::DoubleLongUnsignedSchema)
        COSEM_DOUBLE_LONG_UNSIGNED_TYPE
    COSEM_END_SCHEMA

    IImageTransfer::IImageTransfer(const COSEMObjectInstanceCriteria& OIDCriteria,
        uint16_t ShortNameBase /* = std::numeric_limits<uint16_t>::max() */)
        : ICOSEMObject(OIDCriteria, ShortNameBase)
    {
    }

    ImageTransfer::ImageTransfer()
        : ICOSEMInterface(CLSID_ImageTransfer, 0, 0, 1)
    {
        COSEM_BEGIN_ATTRIBUTES
            COSEM_ATTRIBUTE(image_block_size)
            COSEM_ATTRIBUTE(image_transferred_blocks_status)
            COSEM_ATTRIBUTE(image_first_not_transferred_block_number)
            COSEM_ATTRIBUTE(image_transfer_enabled)
            COSEM_ATTRIBUTE(image_transfer_status)
            COSEM_ATTRIBUTE(image_to_activate_info)
        COSEM_END_ATTRIBUTES

        COSEM_BEGIN_METHODS
            COSEM_METHOD(image_transfer_initiate)
            COSEM_METHOD(image_block_transfer)
            COSEM_METHOD(image_verify)
            COSEM_METHOD(image_activate)
        COSEM_END_METHODS

    }


    //
    // Data
    //
    LinuxImageTransfer::LinuxImageTransfer()
        : IImageTransfer({ 0, 0, 44, 0, 0, 255 })
    {
    }

    APDUConstants::Data_Access_Result LinuxImageTransfer::InternalGet(const AssociationContext& Context,
        ICOSEMAttribute * pAttribute,
        const Cosem_Attribute_Descriptor& Descriptor,
        SelectiveAccess * pSelectiveAccess)
    {
        switch (pAttribute->AttributeID) {
            case ATTR_IMAGE_BLOCK_SIZE:
                pAttribute->Append(512);
                return APDUConstants::Data_Access_Result::success;
                break;
            case ATTR_IMAGE_TRANSFER_ENABLED:
                pAttribute->Append(true);
                return APDUConstants::Data_Access_Result::success;
                break;
            case ATTR_IMAGE_TRANSFERRED_BLOCKS_STATUS:
            case ATTR_IMAGE_FIRST_NOT_TRANSFERRED_BLOCK_NUMBER:
            case ATTR_IMAGE_TRANSFER_STATUS:
            case ATTR_IMAGE_TO_ACTIVATE_INFO:
            default:
                return APDUConstants::Data_Access_Result::object_unavailable;
                break;
        }
        return APDUConstants::Data_Access_Result::object_unavailable;
    }

    APDUConstants::Data_Access_Result LinuxImageTransfer::InternalSet(const AssociationContext& Context,
        ICOSEMAttribute * pAttribute,
        const Cosem_Attribute_Descriptor& Descriptor,
        const DLMSVector& Data,
        SelectiveAccess * pSelectiveAccess)
    {
        APDUConstants::Data_Access_Result RetVal = APDUConstants::Data_Access_Result::temporary_failure;
        try
        {
            DLMSValue Value;

            RetVal = ICOSEMObject::InternalSet(Context, pAttribute, Descriptor, Data, pSelectiveAccess);
            if (APDUConstants::Data_Access_Result::success == RetVal &&
                pAttribute->GetNextValue(&Value) == COSEMType::GetNextResult::VALUE_RETRIEVED)
            {
                m_Values[Descriptor.instance_id.GetValueGroup(EPRI::COSEMObjectInstanceID::VALUE_GROUP_E)] =
                    DLMSValueGet<std::string>(Value);
                RetVal = APDUConstants::Data_Access_Result::success;
            }
            else
            {
                RetVal = APDUConstants::Data_Access_Result::type_unmatched;
            }
        }
        catch (...)
        {
            RetVal = APDUConstants::Data_Access_Result::type_unmatched;
        }
        return RetVal;
    }

    APDUConstants::Action_Result LinuxImageTransfer::InternalAction(const AssociationContext& Context,
        ICOSEMMethod * pMethod,
        const Cosem_Method_Descriptor& Descriptor,
        const DLMSOptional<DLMSVector>& Parameters,
        DLMSVector * pReturnValue /*= nullptr*/)
    {
        APDUConstants::Action_Result result=APDUConstants::Action_Result::object_unavailable;
        switch (pMethod->MethodID)
        {
        case METHOD_IMAGE_ACTIVATE:
            std::cout << "Activating Image\n";
            result = APDUConstants::Action_Result::success;
            break;
        case METHOD_IMAGE_TRANSFER_INITIATE:
        case METHOD_IMAGE_BLOCK_TRANSFER:
        case METHOD_IMAGE_VERIFY:
            std::cout << "ImageTransfer ACTION Received" << std::endl;
            result = APDUConstants::Action_Result::success;
            break;
        default:
            std::cout << "Unknown ImageTransfer ACTION Received" << std::endl;
            break;
        }
        //
        // TODO
        //
        return result;
    }
}
